apply plugin: 'java'

import java.text.SimpleDateFormat

description 'web3j is a lightweight Java library for integration with Ethereum clients'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext.jnr_unixsocketVersion = '0.15'
ext.okhttpVersion = '3.8.1'
ext.rxjavaVersion = '1.2.4'
ext.equalsverifierVersion = '2.1.7'
ext.mockitoVersion = '1.10.19'

configurations {
    // Extra configuration so the other module can declare a Gradle dependency
    // on its “test” subset, using:
    // testCompile project(path: ':web3j_core', configuration: 'archives')
    archives
}

dependencies {
    compile project(':web3j_abi'),
            project(':web3j_crypto'),
            project(':web3j_tuples'),
            "com.github.jnr:jnr-unixsocket:$jnr_unixsocketVersion",
            "com.squareup.okhttp3:okhttp:$okhttpVersion",
            "com.squareup.okhttp3:logging-interceptor:$okhttpVersion",
            "io.reactivex:rxjava:$rxjavaVersion"
    testCompile project(path: ':web3j_crypto', configuration: 'archives'),
            "nl.jqno.equalsverifier:equalsverifier:$equalsverifierVersion"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile "org.mockito:mockito-core:$mockitoVersion"

    // Extra configuration so the other module can declare a Gradle dependency
    // on its “test” subset, using:
    // testCompile project(path: ':web3j_core', configuration: 'archives')
    archives sourceSets.test.output
}

task createProperties(dependsOn: processResources) doLast {
    // if resources dir is empty we need to create this ourselves
    new File("$buildDir/resources/main/").mkdirs()

    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['timestamp'] = getTimestamp()
        p.store w, null
    }
}

def getTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S z")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(today)
}

classes {
    dependsOn createProperties
}
